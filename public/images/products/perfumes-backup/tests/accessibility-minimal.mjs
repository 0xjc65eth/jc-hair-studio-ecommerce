// Teste M√≠nimo de Acessibilidade
import puppeteer from 'puppeteer';
import { AxePuppeteer } from '@axe-core/puppeteer';

const BASE_URL = process.env.TEST_BASE_URL || 'http://localhost:3001';

async function runMinimalAccessibilityTest() {
  console.log('üîç Teste m√≠nimo de acessibilidade iniciado');
  console.log(`üìç URL: ${BASE_URL}`);

  let browser;
  try {
    browser = await puppeteer.launch({
      headless: process.env.TEST_HEADLESS !== 'false',
      args: ['--no-sandbox', '--disable-setuid-sandbox'],
      timeout: 10000
    });

    const page = await browser.newPage();

    console.log('üåê Carregando p√°gina...');
    await page.goto(`${BASE_URL}/`, {
      waitUntil: 'domcontentloaded',
      timeout: 15000
    });

    // Aguardar alguns segundos para garantir que a p√°gina esteja pronta
    await new Promise(resolve => setTimeout(resolve, 3000));

    // Verificar se a p√°gina tem conte√∫do
    const title = await page.title();
    console.log(`üìÑ T√≠tulo da p√°gina: ${title}`);

    console.log('üîç Executando an√°lise axe...');
    const results = await new AxePuppeteer(page)
      .withTags(['wcag2a'])
      .analyze();

    console.log(`‚úÖ An√°lise conclu√≠da: ${results.violations.length} viola√ß√µes`);

    if (results.violations.length > 0) {
      console.log('üö® Principais viola√ß√µes:');
      results.violations.slice(0, 3).forEach((v, i) => {
        console.log(`${i + 1}. ${v.id}: ${v.impact}`);
        console.log(`   ${v.description}`);
        console.log(`   Elementos afetados: ${v.nodes.length}`);
      });
    }

  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

runMinimalAccessibilityTest();