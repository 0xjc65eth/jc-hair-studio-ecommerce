import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

/**
 * Simplified Middleware for JC Hair Studio - Compatible with Next.js 15.x
 *
 * Features:
 * - Basic security headers
 * - Simple rate limiting
 * - Performance headers
 * - Bot detection
 */

// Simple rate limiting store
const rateLimitStore = new Map<string, { count: number; resetTime: number }>();

// Security headers configuration
const SECURITY_HEADERS = {
  'X-Frame-Options': 'DENY',
  'X-Content-Type-Options': 'nosniff',
  'X-XSS-Protection': '1; mode=block',
  'Referrer-Policy': 'strict-origin-when-cross-origin',
  'Permissions-Policy': 'camera=(), microphone=(), geolocation=()',
};

/**
 * Get client IP address
 */
function getClientIP(request: NextRequest): string {
  return (
    request.headers.get('x-forwarded-for')?.split(',')[0] ||
    request.headers.get('x-real-ip') ||
    'unknown'
  );
}

/**
 * Simple rate limiting
 */
function isRateLimited(request: NextRequest): boolean {
  const ip = getClientIP(request);
  const key = `${ip}:${request.nextUrl.pathname}`;
  const now = Date.now();
  const limit = 100; // 100 requests
  const window = 60 * 1000; // per minute

  const stored = rateLimitStore.get(key);

  if (!stored || now > stored.resetTime) {
    rateLimitStore.set(key, {
      count: 1,
      resetTime: now + window
    });
    return false;
  }

  if (stored.count >= limit) {
    return true;
  }

  stored.count++;
  return false;
}

/**
 * Check if request is from a bot
 */
function isBot(userAgent: string): boolean {
  const botPatterns = [
    /googlebot/i,
    /bingbot/i,
    /slurp/i,
    /duckduckbot/i,
    /baiduspider/i,
    /yandexbot/i,
    /facebookexternalhit/i,
    /twitterbot/i,
  ];

  return botPatterns.some(pattern => pattern.test(userAgent));
}

/**
 * Main middleware function
 */
export function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  const userAgent = request.headers.get('user-agent') || '';

  // Rate limiting for API routes
  if (pathname.startsWith('/api/') && isRateLimited(request)) {
    return NextResponse.json(
      { error: 'Rate limit exceeded' },
      { status: 429 }
    );
  }

  // Continue with normal request
  const response = NextResponse.next();

  // Apply security headers
  Object.entries(SECURITY_HEADERS).forEach(([key, value]) => {
    response.headers.set(key, value);
  });

  // Cache headers for static assets
  if (
    pathname.startsWith('/_next/static/') ||
    pathname.startsWith('/static/') ||
    pathname.match(/\.(jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot|css|js)$/)
  ) {
    response.headers.set('Cache-Control', 'public, max-age=31536000, immutable');
  }

  // Bot handling
  if (isBot(userAgent)) {
    response.headers.set('X-Robots-Tag', 'index, follow');
  }

  return response;
}

/**
 * Configure which paths the middleware should run on
 */
export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|public/).*)',
  ],
};