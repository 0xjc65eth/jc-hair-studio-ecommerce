name: CI/CD Pipeline - JC Hair Studio

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  TEST_BASE_URL: http://localhost:3001

jobs:
  # ===================================
  # Job 1: Quality & Unit Tests
  # ===================================
  quality-tests:
    name: üîç Code Quality & Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üìù Run ESLint
        run: npm run lint

      - name: üî§ TypeScript check
        run: npm run type-check

      - name: üíÖ Check Prettier formatting
        run: npm run format:check

      - name: üß™ Run unit tests
        run: npm run test:unit

  # ===================================
  # Job 2: Integration Tests
  # ===================================
  integration-tests:
    name: üîß Integration Tests
    runs-on: ubuntu-latest
    needs: quality-tests

    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîß Setup environment variables
        run: |
          echo "DATABASE_URL=mongodb://localhost:27017/jc_hair_studio_test" >> $GITHUB_ENV
          echo "NEXTAUTH_SECRET=test-secret-for-ci" >> $GITHUB_ENV
          echo "NEXTAUTH_URL=http://localhost:3001" >> $GITHUB_ENV

      - name: üóÑÔ∏è Run integration tests
        run: npm run test:integration

  # ===================================
  # Job 3: Build Test
  # ===================================
  build-test:
    name: üèóÔ∏è Build Test
    runs-on: ubuntu-latest
    needs: quality-tests

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üèóÔ∏è Build production
        run: npm run build

      - name: üíæ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next/
          retention-days: 1

  security-scan:
    runs-on: ubuntu-latest
    needs: test-and-build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Vercel Staging
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

  performance-test:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm ci

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Run custom performance tests
        run: |
          node tests/performance-test.mjs
        env:
          TEST_BASE_URL: https://jc-hair-studio-staging.vercel.app

  notify-success:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success() && github.ref == 'refs/heads/main'

    steps:
      - name: Notify deployment success
        run: |
          echo "üöÄ Deployment successful!"
          echo "Production URL: https://jc-hair-studio.vercel.app"
          echo "All tests passed ‚úÖ"