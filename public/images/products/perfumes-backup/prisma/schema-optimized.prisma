// JC Hair Studio's 62 - Optimized E-commerce Database Schema
// Enhanced Prisma schema for cosmetics e-commerce with proper categorization

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma-optimized"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

// ================================
// USER MANAGEMENT
// ================================

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String?
  name      String?
  phone     String?
  locale    String   @default("pt")

  // OAuth fields
  googleId     String?  @unique
  facebookId   String?  @unique
  avatar       String?

  // Profile info
  firstName    String?
  lastName     String?
  dateOfBirth  DateTime?
  gender       Gender?

  // European address info
  country      String?  @default("DE")
  city         String?
  postalCode   String?

  // Preferences
  newsletter   Boolean  @default(false)
  marketing    Boolean  @default(false)
  currency     String   @default("EUR")

  // Status
  isActive     Boolean  @default(true)
  isVerified   Boolean  @default(false)
  role         UserRole @default(CUSTOMER)

  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastLoginAt  DateTime?

  // Relations
  addresses    Address[]
  orders       Order[]
  reviews      Review[]
  wishlist     WishlistItem[]
  cartItems    CartItem[]

  @@map("users")
}

enum UserRole {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

model Address {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Address details
  type        AddressType @default(SHIPPING)
  firstName   String
  lastName    String
  company     String?

  // European location fields
  street1     String
  street2     String?
  city        String
  state       String?
  postalCode  String
  country     String   @default("DE")

  // Contact
  phone       String?

  // Flags
  isDefault   Boolean  @default(false)
  isActive    Boolean  @default(true)

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("addresses")
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

// ================================
// ENHANCED PRODUCT CATALOG
// ================================

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String   @unique
  description String?

  // Three main categories system
  type        CategoryType

  // SEO & Marketing
  metaTitle       String?
  metaDescription String?
  keywords        String?

  // Media
  image           String?
  icon            String?
  color           String?  // For UI theming

  // Hierarchy
  parentId        String?   @db.ObjectId
  parent          Category? @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children        Category[] @relation("CategoryHierarchy")

  // Display
  displayOrder    Int      @default(0)
  isActive        Boolean  @default(true)
  isFeatured      Boolean  @default(false)

  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Product relations
  products        Product[]

  @@map("categories")
}

enum CategoryType {
  COSMETICOS      // Esmaltes, Tintas, Maquiagem, Relaxamentos
  PROGRESSIVAS    // Progressivas, BTX, Tratamentos
  PRODUTOS_CAPILARES // Shampoos, Máscaras, Óleos
}

model Brand {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  slug        String   @unique
  description String?

  // Brand details
  origin      String?   // Brazil, Italy, etc.
  website     String?
  logo        String?

  // Brand classification
  type        BrandType @default(NATIONAL)
  isPremium   Boolean   @default(false)

  // Status
  isActive    Boolean  @default(true)

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products    Product[]

  @@map("brands")
}

enum BrandType {
  NATIONAL     // Brazilian brands
  INTERNATIONAL // European/International brands
  PRIVATE_LABEL // JC Hair Studio private label
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String   @unique
  description String?
  shortDesc   String?

  // SKU & Inventory
  sku         String   @unique
  barcode     String?

  // DUAL PRICING SYSTEM (BRL + EUR)
  priceBRL        Float    // Original Brazilian price
  priceEUR        Float    // Calculated European price (BRL * 0.158 * 1.5)
  comparePriceBRL Float?   // Original compare price in BRL
  comparePriceEUR Float?   // Compare price in EUR
  cost            Float?   // Cost price for margin calculation

  // Promotion handling
  isOnPromotion   Boolean @default(false)
  promoPriceBRL   Float?
  promoPriceEUR   Float?
  promoStartDate  DateTime?
  promoEndDate    DateTime?

  // Physical attributes
  weight      Float?   // in grams
  dimensions  String?  // "20x8x8cm"
  volume      String?  // "500ml", "1L", etc.

  // Product-specific attributes
  brand       Brand    @relation(fields: [brandId], references: [id])
  brandId     String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String   @db.ObjectId

  // Enhanced product classification
  productType ProductType
  subcategory String?     // Specific subcategory within main category

  // Hair/Beauty specific
  hairType    String?   // For hair products
  skinType    String?   // For cosmetics
  shades      String[]  // Available shades/colors

  // Cosmetics specific (for nail polish, makeup)
  colors      ColorVariant[]

  // Treatment specific (for progressivas)
  duration        String?   // "3-4 meses"
  application     String?   // Application instructions
  activeIngredients String[] // Active ingredients
  hairTypes       String[]  // Suitable hair types

  // Stock management
  trackQuantity Boolean @default(true)
  quantity      Int     @default(0)
  lowStockAlert Int     @default(5)

  // Status
  status        ProductStatus @default(DRAFT)
  isDigital     Boolean       @default(false)
  requiresShipping Boolean    @default(true)

  // European compliance
  isEUCompliant Boolean @default(true)
  certifications String[] // CE, EU Ecolabel, etc.

  // Content & SEO
  metaTitle       String?
  metaDescription String?
  keywords        String[]
  tags            String[]

  // Display & Marketing
  displayOrder    Int     @default(0)
  isFeatured      Boolean @default(false)
  isNewArrival    Boolean @default(false)
  isBestSeller    Boolean @default(false)

  // Rich content
  features        String[]    // Key features
  benefits        String[]    // Benefits
  howToUse        String?     // Usage instructions
  ingredients     String?     // Full ingredient list
  warnings        String?     // Safety warnings

  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  publishedAt     DateTime?

  // Media relations
  images          ProductImage[]
  variants        ProductVariant[]

  // Commerce relations
  reviews         Review[]
  orderItems      OrderItem[]
  cartItems       CartItem[]
  wishlistItems   WishlistItem[]

  @@map("products")
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  OUT_OF_STOCK
  DISCONTINUED
}

enum ProductType {
  // COSMÉTICOS
  ESMALTE
  TINTA_CABELO
  MAQUIAGEM
  FERRAMENTA_MAQUIAGEM
  RELAXAMENTO

  // PROGRESSIVAS
  PROGRESSIVA_SEM_FORMOL
  PROGRESSIVA_PROFISSIONAL
  BOTOX_CAPILAR

  // PRODUTOS CAPILARES
  SHAMPOO
  CONDICIONADOR
  MASCARA_TRATAMENTO
  OLEO_CAPILAR
  HIDRATACAO
  RECONSTRUCAO
  NUTRICAO
}

// Embedded types for product variants
type ColorVariant {
  name      String
  hex       String?
  image     String?
  stock     Int     @default(0)
  priceEUR  Float?  // Optional price override
}

model ProductImage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  url       String
  alt       String?
  title     String?

  // Image properties
  width     Int?
  height    Int?
  size      Int?     // File size in bytes
  format    String?  // webp, jpg, png

  // Organization
  order     Int      @default(0)
  isMain    Boolean  @default(false)
  isThumbnail Boolean @default(false)

  // CDN optimization
  cloudinaryId String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_images")
}

model ProductVariant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Variant details
  name      String   // "Rosa Diamond", "500ml", etc.
  type      VariantType
  value     String   // Color name, size, etc.

  // Pricing
  priceEUR  Float?   // Override price if different

  // Stock
  stock     Int      @default(0)

  // Visual
  image     String?  // Variant-specific image
  hex       String?  // For color variants

  // Status
  isActive  Boolean  @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_variants")
}

enum VariantType {
  COLOR
  SIZE
  SHADE
  TYPE
  VOLUME
}

// ================================
// SHOPPING & ORDERS
// ================================

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  quantity  Int      @default(1)
  priceEUR  Float    // Price at time of adding to cart

  // Variant selection
  selectedVariants Json? // Store selected color, size, etc.

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

model WishlistItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Order {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber   String   @unique
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])

  // Order status
  status        OrderStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)

  // Pricing (in EUR)
  subtotal      Float
  shipping      Float
  tax           Float
  discount      Float    @default(0)
  total         Float

  // Customer info (snapshot)
  customerEmail String
  customerPhone String?

  // Addresses (embedded)
  shippingAddress Json
  billingAddress  Json?

  // Payment info
  paymentMethod   String?
  paymentId       String?  // Stripe payment intent ID

  // Fulfillment
  shippingMethod  String?
  trackingNumber  String?
  shippedAt       DateTime?
  deliveredAt     DateTime?

  // Notes
  customerNotes   String?
  adminNotes      String?

  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  items         OrderItem[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])

  // Item details (snapshot at time of order)
  productName String
  productSku  String
  priceEUR    Float
  quantity    Int

  // Variant info
  variantInfo Json?

  // Timestamps
  createdAt   DateTime @default(now())

  @@map("order_items")
}

// ================================
// REVIEWS & RATINGS
// ================================

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Review content
  rating    Int      // 1-5 stars
  title     String?
  comment   String

  // Verification
  isVerified Boolean @default(false) // Verified purchase

  // Moderation
  isApproved Boolean @default(false)
  isHidden   Boolean @default(false)

  // Helpfulness
  helpfulCount   Int @default(0)
  unhelpfulCount Int @default(0)

  // Media
  images    ReviewImage[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model ReviewImage {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  reviewId String @db.ObjectId
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  url      String
  alt      String?

  createdAt DateTime @default(now())

  @@map("review_images")
}

// ================================
// PROMOTIONS & COUPONS
// ================================

model Coupon {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  code        String   @unique
  name        String
  description String?

  // Discount settings
  type        CouponType
  value       Float      // Percentage or fixed amount
  minAmount   Float?     // Minimum order amount
  maxAmount   Float?     // Maximum discount amount

  // Usage limits
  usageLimit    Int?     // Total usage limit
  usageCount    Int      @default(0)
  userLimit     Int?     // Per-user limit

  // Validity
  startDate   DateTime
  endDate     DateTime?

  // Status
  isActive    Boolean  @default(true)

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("coupons")
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

// ================================
// ANALYTICS & TRACKING
// ================================

model ProductView {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  userId    String?  @db.ObjectId

  // Session tracking
  sessionId String?
  userAgent String?
  ipAddress String?

  // Referrer info
  referrer  String?
  source    String?  // google, facebook, direct, etc.

  // Timestamps
  viewedAt  DateTime @default(now())

  @@map("product_views")
}

model SearchQuery {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  query     String
  userId    String?  @db.ObjectId

  // Results
  resultCount Int

  // Session info
  sessionId String?
  userAgent String?

  // Timestamps
  searchedAt DateTime @default(now())

  @@map("search_queries")
}

// ================================
// CONTENT MANAGEMENT
// ================================

model Page {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String   @unique
  content     String
  excerpt     String?

  // SEO
  metaTitle       String?
  metaDescription String?
  keywords        String[]

  // Status
  status      PageStatus @default(DRAFT)
  isActive    Boolean    @default(true)

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?

  @@map("pages")
}

enum PageStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// ================================
// NEWSLETTER & MARKETING
// ================================

model Newsletter {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  firstName String?
  lastName  String?

  // Preferences
  isActive    Boolean @default(true)
  frequency   String  @default("weekly") // weekly, monthly
  interests   String[] // cosmetics, hair-care, etc.

  // Tracking
  source      String? // website, popup, social, etc.

  // Timestamps
  subscribedAt   DateTime @default(now())
  unsubscribedAt DateTime?

  @@map("newsletter")
}