#!/usr/bin/env node

import { createRequire } from 'module';
const require = createRequire(import.meta.url);

const BASE_URL = process.env.TEST_BASE_URL || 'http://localhost:3001';

async function testAdminPanel() {
  console.log('üîê Testando Padr√£o Admin...');
  console.log(`üìç URL Base: ${BASE_URL}`);
  console.log();

  let sessionToken = null;

  try {
    // Teste 1: Verificar se a p√°gina admin est√° dispon√≠vel
    console.log('üîç Teste 1: Verificar disponibilidade da p√°gina admin...');
    const adminPageResponse = await fetch(`${BASE_URL}/admin`);

    if (adminPageResponse.ok) {
      console.log('‚úÖ P√°gina admin dispon√≠vel');
      console.log(`üìã Status: ${adminPageResponse.status}`);
    } else {
      console.log('‚ùå P√°gina admin indispon√≠vel');
      console.log(`‚ùå Status: ${adminPageResponse.status}`);
      return;
    }

    console.log();

    // Teste 2: Testar autentica√ß√£o admin
    console.log('üß™ Teste 2: Testando autentica√ß√£o admin...');

    const adminPassword = 'juliocesar65';
    const authResponse = await fetch(`${BASE_URL}/api/admin/auth`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ password: adminPassword })
    });

    const authData = await authResponse.json();

    if (authData.success) {
      console.log('‚úÖ Autentica√ß√£o admin bem-sucedida');
      sessionToken = authData.sessionData.token;
      console.log(`üîë Token de sess√£o obtido: ${sessionToken ? 'Sim' : 'N√£o'}`);
    } else {
      console.log('‚ùå Falha na autentica√ß√£o admin');
      console.log(`Erro: ${authData.error}`);
    }

    console.log();

    // Teste 3: Testar endpoints do painel admin
    console.log('üìä Teste 3: Testando endpoints do painel admin...');

    const adminEndpoints = [
      { name: 'Dashboard Stats', endpoint: '/api/admin/stats' },
      { name: 'Orders List', endpoint: '/api/admin/orders' },
      { name: 'Products List', endpoint: '/api/admin/products' },
      { name: 'Users List', endpoint: '/api/admin/users' },
      { name: 'Analytics', endpoint: '/api/admin/analytics' }
    ];

    for (const { name, endpoint } of adminEndpoints) {
      console.log(`üì§ Testando: ${name}`);

      try {
        const response = await fetch(`${BASE_URL}${endpoint}`, {
          headers: {
            'Authorization': `Bearer ${adminPassword}`,
            'Content-Type': 'application/json'
          }
        });

        if (response.ok) {
          const data = await response.json();
          console.log(`  ‚úÖ ${name}: Funcional (${Object.keys(data).length} campos retornados)`);
        } else if (response.status === 401) {
          console.log(`  üîí ${name}: Requer autentica√ß√£o (${response.status})`);
        } else if (response.status === 404) {
          console.log(`  ‚ö†Ô∏è  ${name}: Endpoint n√£o encontrado (${response.status})`);
        } else {
          console.log(`  ‚ùå ${name}: Erro ${response.status}`);
        }
      } catch (error) {
        console.log(`  ‚ùå ${name}: Erro de conex√£o (${error.message})`);
      }

      await new Promise(resolve => setTimeout(resolve, 500));
    }

    console.log();

    // Teste 4: Testar funcionalidades espec√≠ficas do admin
    console.log('‚öôÔ∏è Teste 4: Testando funcionalidades espec√≠ficas...');

    // Teste de gest√£o de pedidos
    console.log('üì¶ Testando gest√£o de pedidos...');
    try {
      const ordersResponse = await fetch(`${BASE_URL}/api/admin/orders`, {
        headers: {
          'Authorization': `Bearer ${adminPassword}`,
          'Content-Type': 'application/json'
        }
      });

      if (ordersResponse.ok) {
        const orders = await ordersResponse.json();
        console.log(`  ‚úÖ Lista de pedidos: ${Array.isArray(orders) ? orders.length : 'N/A'} pedidos`);
      } else {
        console.log(`  ‚ö†Ô∏è  Lista de pedidos: Status ${ordersResponse.status}`);
      }
    } catch (error) {
      console.log(`  ‚ùå Gest√£o de pedidos: ${error.message}`);
    }

    // Teste de estat√≠sticas do dashboard
    console.log('üìà Testando estat√≠sticas do dashboard...');
    try {
      const statsResponse = await fetch(`${BASE_URL}/api/admin/stats`, {
        headers: {
          'Authorization': `Bearer ${adminPassword}`,
          'Content-Type': 'application/json'
        }
      });

      if (statsResponse.ok) {
        const stats = await statsResponse.json();
        console.log(`  ‚úÖ Estat√≠sticas: ${Object.keys(stats).length} m√©tricas dispon√≠veis`);
      } else {
        console.log(`  ‚ö†Ô∏è  Estat√≠sticas: Status ${statsResponse.status}`);
      }
    } catch (error) {
      console.log(`  ‚ùå Dashboard stats: ${error.message}`);
    }

    // Teste de notifica√ß√µes admin
    console.log('üîî Testando notifica√ß√µes admin...');
    try {
      const notificationsResponse = await fetch(`${BASE_URL}/api/admin/notifications`, {
        headers: {
          'Authorization': `Bearer ${adminPassword}`,
          'Content-Type': 'application/json'
        }
      });

      if (notificationsResponse.ok) {
        const notifications = await notificationsResponse.json();
        console.log(`  ‚úÖ Notifica√ß√µes admin: ${Array.isArray(notifications) ? notifications.length : 'Sistema'} ativo`);
      } else {
        console.log(`  ‚ö†Ô∏è  Notifica√ß√µes admin: Status ${notificationsResponse.status}`);
      }
    } catch (error) {
      console.log(`  ‚ùå Notifica√ß√µes admin: ${error.message}`);
    }

    console.log();

    // Teste 5: Testar funcionalidades de CRUD
    console.log('üõ†Ô∏è Teste 5: Testando opera√ß√µes CRUD...');

    // Teste de cria√ß√£o de produto (simulado)
    console.log('üìù Testando cria√ß√£o de produto...');
    const testProduct = {
      name: `Produto Teste ${Date.now()}`,
      price: 29.99,
      category: 'cuidados-capilares',
      brand: 'Teste',
      description: 'Produto de teste para valida√ß√£o do painel admin'
    };

    try {
      const createProductResponse = await fetch(`${BASE_URL}/api/admin/products`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${adminPassword}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(testProduct)
      });

      if (createProductResponse.ok) {
        const createdProduct = await createProductResponse.json();
        console.log(`  ‚úÖ Cria√ß√£o de produto: Sucesso (ID: ${createdProduct.id || 'N/A'})`);
      } else {
        console.log(`  ‚ö†Ô∏è  Cria√ß√£o de produto: Status ${createProductResponse.status}`);
      }
    } catch (error) {
      console.log(`  ‚ùå Cria√ß√£o de produto: ${error.message}`);
    }

    console.log();

    // Teste 6: Verificar seguran√ßa e autentica√ß√£o
    console.log('üõ°Ô∏è Teste 6: Verificando seguran√ßa e autentica√ß√£o...');

    // Teste de acesso sem autentica√ß√£o
    console.log('üîí Testando acesso sem autentica√ß√£o...');
    const unauthorizedResponse = await fetch(`${BASE_URL}/api/admin/orders`);

    if (unauthorizedResponse.status === 401 || unauthorizedResponse.status === 403) {
      console.log('‚úÖ Prote√ß√£o adequada: Acesso negado sem autentica√ß√£o');
    } else {
      console.log('‚ö†Ô∏è  Poss√≠vel falha de seguran√ßa: Acesso permitido sem autentica√ß√£o');
    }

    // Teste de token inv√°lido
    console.log('üîë Testando token inv√°lido...');
    const invalidTokenResponse = await fetch(`${BASE_URL}/api/admin/orders`, {
      headers: {
        'Authorization': 'Bearer token_invalido_123',
        'Content-Type': 'application/json'
      }
    });

    if (invalidTokenResponse.status === 401 || invalidTokenResponse.status === 403) {
      console.log('‚úÖ Valida√ß√£o de token: Token inv√°lido rejeitado corretamente');
    } else {
      console.log('‚ö†Ô∏è  Poss√≠vel falha na valida√ß√£o de token');
    }

    console.log();

    // Teste 7: Verificar configura√ß√µes do sistema
    console.log('‚öôÔ∏è Teste 7: Verificando configura√ß√µes do sistema...');

    const systemConfig = {
      adminPasswordSet: !!process.env.ADMIN_PASSWORD,
      databaseConnection: process.env.MONGODB_URI ? 'Configurado' : 'N√£o configurado',
      emailService: process.env.SENDGRID_API_KEY ? 'Configurado' : 'N√£o configurado',
      paymentService: process.env.STRIPE_SECRET_KEY ? 'Configurado' : 'N√£o configurado'
    };

    console.log(`üîê Senha admin: ${systemConfig.adminPasswordSet ? 'Configurada' : 'N√£o configurada'}`);
    console.log(`üóÑÔ∏è  Banco de dados: ${systemConfig.databaseConnection}`);
    console.log(`üìß Servi√ßo de email: ${systemConfig.emailService}`);
    console.log(`üí≥ Servi√ßo de pagamento: ${systemConfig.paymentService}`);

    console.log();
    console.log('üéâ Teste do padr√£o admin conclu√≠do!');
    console.log();
    console.log('üìä RESUMO DOS TESTES:');
    console.log('‚úÖ P√°gina admin acess√≠vel');
    console.log('‚úÖ Sistema de autentica√ß√£o testado');
    console.log('‚úÖ Endpoints do painel verificados');
    console.log('‚úÖ Funcionalidades espec√≠ficas testadas');
    console.log('‚úÖ Opera√ß√µes CRUD verificadas');
    console.log('‚úÖ Seguran√ßa e prote√ß√£o validadas');
    console.log('‚úÖ Configura√ß√µes do sistema verificadas');

  } catch (error) {
    console.error('‚ùå Erro durante o teste do padr√£o admin:', error);
  }
}

testAdminPanel();